import React, { useState, useEffect, useRef } from 'react';
import { Button } from './components/ui/button';
import { Input } from './components/ui/input';
import { Card } from './components/ui/card';
import { Badge } from './components/ui/badge';
import { Separator } from './components/ui/separator';
import { Users, Trophy, Zap, Settings, Play, Square, Crown, Gift, WifiOff, Wifi } from 'lucide-react';
import './App.css';

function App() {
  const [streamUrl, setStreamUrl] = useState('');
  const [keyword, setKeyword] = useState('!—É—á–∞—Å—Ç–≤—É—é');
  const [participants, setParticipants] = useState([]);
  const [chatMessages, setChatMessages] = useState([]);
  const [isConnected, setIsConnected] = useState(false);
  const [connectionStatus, setConnectionStatus] = useState('disconnected');
  const [winner, setWinner] = useState(null);
  const [showWinnerAnimation, setShowWinnerAnimation] = useState(false);
  const [channelName, setChannelName] = useState('');
  const chatEndRef = useRef(null);
  const wsRef = useRef(null);

  // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞–Ω–∞–ª–∞ –∏–∑ URL
  const extractChannelName = (url) => {
    try {
      // –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã URL
      const patterns = [
        /twitch\.tv\/(\w+)$/,
        /twitch\.tv\/(\w+)\/?$/,
        /www\.twitch\.tv\/(\w+)$/,
        /www\.twitch\.tv\/(\w+)\/?$/,
      ];
      
      for (const pattern of patterns) {
        const match = url.match(pattern);
        if (match) {
          return match[1].toLowerCase();
        }
      }
      
      // –ï—Å–ª–∏ —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞
      if (/^\w+$/.test(url)) {
        return url.toLowerCase();
      }
      
      return null;
    } catch (error) {
      console.error('Error extracting channel name:', error);
      return null;
    }
  };

  // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Twitch IRC —á–µ—Ä–µ–∑ WebSocket
  const connectToTwitchChat = (channelName) => {
    try {
      setConnectionStatus('connecting');
      setChatMessages([{
        id: 'system-' + Date.now(),
        username: 'TwitchBot',
        message: `üîå –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –∫–∞–Ω–∞–ª—É ${channelName}...`,
        timestamp: new Date().toLocaleTimeString(),
        isSystem: true
      }]);

      // –°–æ–∑–¥–∞–µ–º WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Twitch IRC
      const ws = new WebSocket('wss://irc-ws.chat.twitch.tv:443');
      wsRef.current = ws;

      ws.onopen = () => {
        console.log('WebSocket connected to Twitch IRC');
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ IRC
        ws.send('PASS SCHMOOPIIE'); // –ê–Ω–æ–Ω–∏–º–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        ws.send('NICK justinfan12345'); // –ê–Ω–æ–Ω–∏–º–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        ws.send(`JOIN #${channelName}`); // –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º—Å—è –∫ –∫–∞–Ω–∞–ª—É
        
        setConnectionStatus('connected');
        setIsConnected(true);
        
        setChatMessages(prev => [...prev, {
          id: 'system-' + Date.now(),
          username: 'TwitchBot',
          message: `‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ –∫–∞–Ω–∞–ª—É ${channelName}! –û–∂–∏–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è...`,
          timestamp: new Date().toLocaleTimeString(),
          isSystem: true
        }]);
      };

      ws.onmessage = (event) => {
        const message = event.data.trim();
        console.log('Twitch IRC message:', message);
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ PING/PONG –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        if (message.startsWith('PING')) {
          ws.send('PONG :tmi.twitch.tv');
          return;
        }
        
        // –ü–∞—Ä—Å–∏–Ω–≥ —Å–æ–æ–±—â–µ–Ω–∏–π —á–∞—Ç–∞
        const chatMatch = message.match(/:(\w+)!\w+@\w+\.tmi\.twitch\.tv PRIVMSG #\w+ :(.+)/);
        if (chatMatch) {
          const [, username, messageText] = chatMatch;
          const isKeywordMessage = messageText.toLowerCase().includes(keyword.toLowerCase());
          
          const newMessage = {
            id: 'real-' + Date.now() + '-' + Math.random(),
            username: username,
            message: messageText,
            timestamp: new Date().toLocaleTimeString(),
            isKeyword: isKeywordMessage,
            isSystem: false
          };

          setChatMessages(prev => [...prev.slice(-49), newMessage]);
          
          // –î–æ–±–∞–≤–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞ –µ—Å–ª–∏ –Ω–∞–ø–∏—Å–∞–ª –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ
          if (isKeywordMessage && !participants.includes(username)) {
            setParticipants(prev => [...prev, username]);
            
            // –î–æ–±–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º —É—á–∞—Å—Ç–Ω–∏–∫–µ
            setChatMessages(prev => [...prev, {
              id: 'participant-' + Date.now(),
              username: 'TwitchBot',
              message: `üéØ ${username} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ —Ä–æ–∑—ã–≥—Ä—ã—à—É!`,
              timestamp: new Date().toLocaleTimeString(),
              isSystem: true
            }]);
          }
        }
      };

      ws.onerror = (error) => {
        console.error('WebSocket error:', error);
        setConnectionStatus('error');
        setChatMessages(prev => [...prev, {
          id: 'error-' + Date.now(),
          username: 'TwitchBot',
          message: '‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —á–∞—Ç—É Twitch',
          timestamp: new Date().toLocaleTimeString(),
          isSystem: true
        }]);
      };

      ws.onclose = () => {
        console.log('WebSocket disconnected');
        setConnectionStatus('disconnected');
        setIsConnected(false);
        setChatMessages(prev => [...prev, {
          id: 'disconnect-' + Date.now(),
          username: 'TwitchBot',
          message: 'üîå –û—Ç–∫–ª—é—á–µ–Ω–æ –æ—Ç —á–∞—Ç–∞',
          timestamp: new Date().toLocaleTimeString(),
          isSystem: true
        }]);
      };

    } catch (error) {
      console.error('Error connecting to Twitch:', error);
      setConnectionStatus('error');
    }
  };

  // –ê–≤—Ç–æ—Å–∫—Ä–æ–ª–ª —á–∞—Ç–∞
  useEffect(() => {
    chatEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  }, [chatMessages]);

  const startListening = () => {
    if (!streamUrl.trim()) {
      alert('–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Å—Ç—Ä–∏–º –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞!');
      return;
    }

    const channel = extractChannelName(streamUrl.trim());
    if (!channel) {
      alert('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏! –ü—Ä–∏–º–µ—Ä—ã:\n- https://twitch.tv/channelname\n- https://www.twitch.tv/channelname\n- channelname');
      return;
    }

    setChannelName(channel);
    connectToTwitchChat(channel);
    
    setChatMessages([{
      id: 'start-' + Date.now(),
      username: 'TwitchBot',
      message: `üéâ –†–æ–∑—ã–≥—Ä—ã—à –Ω–∞—á–∞–ª—Å—è! –ü–∏—à–∏—Ç–µ "${keyword}" –≤ —á–∞—Ç–µ –¥–ª—è —É—á–∞—Å—Ç–∏—è!`,
      timestamp: new Date().toLocaleTimeString(),
      isSystem: true
    }]);
  };

  const stopListening = () => {
    if (wsRef.current) {
      wsRef.current.close();
    }
    setConnectionStatus('disconnected');
    setIsConnected(false);
  };

  const selectWinner = () => {
    if (participants.length === 0) {
      alert('–ù–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞!');
      return;
    }

    const randomIndex = Math.floor(Math.random() * participants.length);
    const selectedWinner = participants[randomIndex];
    
    setWinner(selectedWinner);
    setShowWinnerAnimation(true);
    
    // –£–±–∏—Ä–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
    setTimeout(() => {
      setShowWinnerAnimation(false);
    }, 5000);

    // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ –≤ —á–∞—Ç
    setChatMessages(prev => [...prev, {
      id: 'winner-' + Date.now(),
      username: 'TwitchBot',
      message: `üèÜ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º ${selectedWinner}! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏!`,
      timestamp: new Date().toLocaleTimeString(),
      isSystem: true
    }]);
  };

  const clearParticipants = () => {
    setParticipants([]);
    setWinner(null);
  };

  const getConnectionStatusColor = () => {
    switch (connectionStatus) {
      case 'connected': return 'text-green-400';
      case 'connecting': return 'text-yellow-400';
      case 'error': return 'text-red-400';
      default: return 'text-gray-400';
    }
  };

  const getConnectionStatusText = () => {
    switch (connectionStatus) {
      case 'connected': return '–ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ —á–∞—Ç—É';
      case 'connecting': return '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...';
      case 'error': return '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è';
      default: return '–ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ';
    }
  };

  const getConnectionStatusIcon = () => {
    switch (connectionStatus) {
      case 'connected': return <Wifi className="w-4 h-4" />;
      case 'connecting': return <Zap className="w-4 h-4 animate-pulse" />;
      case 'error': return <WifiOff className="w-4 h-4" />;
      default: return <WifiOff className="w-4 h-4" />;
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-purple-900 via-black to-purple-800">
      {/* Winner Animation Overlay */}
      {showWinnerAnimation && (
        <div className="fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-80 backdrop-blur-sm">
          <div className="text-center animate-bounce">
            <Crown className="w-24 h-24 mx-auto text-yellow-400 mb-4 animate-spin" />
            <h1 className="text-6xl font-bold text-white mb-4 animate-pulse">üéâ –ü–û–ë–ï–î–ò–¢–ï–õ–¨! üéâ</h1>
            <h2 className="text-4xl font-bold text-yellow-400 mb-8">{winner}</h2>
            <div className="text-2xl text-white">–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –ø–æ–±–µ–¥–æ–π!</div>
          </div>
        </div>
      )}

      <div className="container mx-auto p-6">
        {/* Header */}
        <div className="text-center mb-8">
          <div className="flex items-center justify-center gap-4 mb-4">
            <Gift className="w-12 h-12 text-purple-400" />
            <h1 className="text-4xl font-bold text-white">Twitch –†–æ–∑—ã–≥—Ä—ã—à</h1>
            <Trophy className="w-12 h-12 text-yellow-400" />
          </div>
          <p className="text-gray-300 text-lg">–†–µ–∞–ª—å–Ω—ã–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∏ –ø—Ä–∏–∑–æ–≤ –¥–ª—è –≤–∞—à–µ–≥–æ —Å—Ç—Ä–∏–º–∞</p>
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
          {/* Control Panel */}
          <div className="lg:col-span-1">
            <Card className="bg-gray-900 border-gray-700 p-6">
              <h2 className="text-xl font-bold text-white mb-6 flex items-center gap-2">
                <Settings className="w-6 h-6 text-purple-400" />
                –ù–∞—Å—Ç—Ä–æ–π–∫–∏
              </h2>

              <div className="space-y-4">
                <div>
                  <label className="text-sm font-medium text-gray-300 block mb-2">
                    –°—Å—ã–ª–∫–∞ –Ω–∞ —Å—Ç—Ä–∏–º –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞
                  </label>
                  <Input
                    value={streamUrl}
                    onChange={(e) => setStreamUrl(e.target.value)}
                    placeholder="https://twitch.tv/channelname –∏–ª–∏ channelname"
                    className="bg-gray-800 border-gray-600 text-white placeholder-gray-400"
                  />
                  <div className="text-xs text-gray-500 mt-1">
                    –ü—Ä–∏–º–µ—Ä—ã: ninja, shroud, https://twitch.tv/ninja
                  </div>
                </div>

                <div>
                  <label className="text-sm font-medium text-gray-300 block mb-2">
                    –ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è —É—á–∞—Å—Ç–∏—è
                  </label>
                  <Input
                    value={keyword}
                    onChange={(e) => setKeyword(e.target.value)}
                    placeholder="!—É—á–∞—Å—Ç–≤—É—é"
                    className="bg-gray-800 border-gray-600 text-white placeholder-gray-400"
                  />
                </div>

                <Separator className="bg-gray-600" />

                {/* Connection Status */}
                <div className={`flex items-center gap-2 ${getConnectionStatusColor()}`}>
                  {getConnectionStatusIcon()}
                  <span className="text-sm">{getConnectionStatusText()}</span>
                  {channelName && (
                    <Badge variant="outline" className="text-xs border-purple-500 text-purple-400">
                      #{channelName}
                    </Badge>
                  )}
                </div>

                <div className="flex gap-2">
                  {!isConnected ? (
                    <Button
                      onClick={startListening}
                      className="flex-1 bg-green-600 hover:bg-green-700 text-white"
                      disabled={connectionStatus === 'connecting'}
                    >
                      <Play className="w-4 h-4 mr-2" />
                      {connectionStatus === 'connecting' ? '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...' : '–ù–∞—á–∞—Ç—å'}
                    </Button>
                  ) : (
                    <Button
                      onClick={stopListening}
                      className="flex-1 bg-red-600 hover:bg-red-700 text-white"
                    >
                      <Square className="w-4 h-4 mr-2" />
                      –°—Ç–æ–ø
                    </Button>
                  )}
                </div>
              </div>
            </Card>

            {/* Participants */}
            <Card className="bg-gray-900 border-gray-700 p-6 mt-6">
              <div className="flex items-center justify-between mb-4">
                <h3 className="text-lg font-bold text-white flex items-center gap-2">
                  <Users className="w-5 h-5 text-blue-400" />
                  –£—á–∞—Å—Ç–Ω–∏–∫–∏ ({participants.length})
                </h3>
                <Button
                  onClick={clearParticipants}
                  variant="outline"
                  size="sm"
                  className="border-gray-600 text-gray-300 hover:bg-gray-800"
                >
                  –û—á–∏—Å—Ç–∏—Ç—å
                </Button>
              </div>

              <div className="max-h-48 overflow-y-auto space-y-2 custom-scrollbar">
                {participants.map((participant, index) => (
                  <div
                    key={index}
                    className="flex items-center gap-2 p-2 bg-gray-800 rounded-lg animate-fadeIn"
                  >
                    <Badge variant="outline" className="border-purple-500 text-purple-400">
                      {index + 1}
                    </Badge>
                    <span className="text-white">{participant}</span>
                  </div>
                ))}
                {participants.length === 0 && (
                  <div className="text-center py-4 text-gray-500">
                    <Users className="w-8 h-8 mx-auto mb-2" />
                    <p className="text-sm">–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç</p>
                    <p className="text-xs">–ñ–¥–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–æ–º</p>
                  </div>
                )}
              </div>

              {participants.length > 0 && (
                <Button
                  onClick={selectWinner}
                  className="w-full mt-4 bg-gradient-to-r from-yellow-500 to-orange-500 hover:from-yellow-600 hover:to-orange-600 text-white font-bold"
                >
                  <Trophy className="w-4 h-4 mr-2" />
                  –í—ã–±—Ä–∞—Ç—å –ø–æ–±–µ–¥–∏—Ç–µ–ª—è! ({participants.length})
                </Button>
              )}

              {winner && !showWinnerAnimation && (
                <div className="mt-4 p-3 bg-gradient-to-r from-yellow-500/20 to-orange-500/20 border border-yellow-500 rounded-lg">
                  <div className="text-center">
                    <Crown className="w-6 h-6 mx-auto text-yellow-400 mb-2" />
                    <div className="text-sm text-gray-300">–ü–æ—Å–ª–µ–¥–Ω–∏–π –ø–æ–±–µ–¥–∏—Ç–µ–ª—å:</div>
                    <div className="text-lg font-bold text-yellow-400">{winner}</div>
                  </div>
                </div>
              )}
            </Card>
          </div>

          {/* Chat */}
          <div className="lg:col-span-2">
            <Card className="bg-gray-900 border-gray-700 p-6 h-[600px] flex flex-col">
              <div className="flex items-center justify-between mb-4">
                <h2 className="text-xl font-bold text-white flex items-center gap-2">
                  üí¨ –ß–∞—Ç Twitch
                  {isConnected && (
                    <Badge className="bg-green-600 text-white animate-pulse">LIVE</Badge>
                  )}
                  {channelName && (
                    <Badge variant="outline" className="border-purple-500 text-purple-400">
                      #{channelName}
                    </Badge>
                  )}
                </h2>
                
                <div className={`flex items-center gap-2 ${getConnectionStatusColor()}`}>
                  {getConnectionStatusIcon()}
                  <span className="text-sm">{getConnectionStatusText()}</span>
                </div>
              </div>

              <div className="flex-1 overflow-y-auto space-y-2 pr-2 custom-scrollbar">
                {chatMessages.map((msg) => (
                  <div
                    key={msg.id}
                    className={`p-3 rounded-lg animate-slideIn ${
                      msg.isSystem 
                        ? 'bg-blue-900/50 border border-blue-500' 
                        : msg.isKeyword 
                          ? 'bg-purple-900/50 border border-purple-500' 
                          : 'bg-gray-800'
                    }`}
                  >
                    <div className="flex items-center gap-2 mb-1">
                      <Badge 
                        variant="outline" 
                        className={`text-xs ${
                          msg.isSystem ? 'border-blue-400 text-blue-400' : 'border-gray-500 text-gray-400'
                        }`}
                      >
                        {msg.username}
                      </Badge>
                      <span className="text-xs text-gray-500">{msg.timestamp}</span>
                      {msg.isKeyword && (
                        <Badge className="bg-purple-600 text-white text-xs animate-pulse">
                          –£—á–∞—Å—Ç–Ω–∏–∫!
                        </Badge>
                      )}
                    </div>
                    <p className={`text-sm ${
                      msg.isSystem ? 'text-blue-300 font-semibold' : 'text-white'
                    }`}>
                      {msg.message}
                    </p>
                  </div>
                ))}
                <div ref={chatEndRef} />
              </div>

              {!isConnected && (
                <div className="text-center py-8 text-gray-500">
                  <div className="text-4xl mb-4">üîå</div>
                  <p className="text-lg mb-2">–ü–æ–¥–∫–ª—é—á–∏—Ç–µ —á–∞—Ç –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–æ–∑—ã–≥—Ä—ã—à–∞</p>
                  <p className="text-sm">–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Å—Ç—Ä–∏–º –∏ –Ω–∞–∂–º–∏—Ç–µ "–ù–∞—á–∞—Ç—å"</p>
                  <div className="mt-4 text-xs text-gray-600">
                    <p>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:</p>
                    <p>‚Ä¢ https://twitch.tv/channelname</p>
                    <p>‚Ä¢ channelname</p>
                  </div>
                </div>
              )}
            </Card>
          </div>
        </div>
      </div>
    </div>
  );
}

export default App;